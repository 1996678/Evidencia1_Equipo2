REGISTRAR NOTA- IVANA------------------------------------------------------------------------------------------------
import datetime

class RegistroNota:
    def __init__(self, nombrecliente, folio, fechanota):
        self.folio = folio
        self.fecha = fechanota
        self.nombrecliente = nombrecliente
        self.servicios = {}
        self.cancelada = False

    def agregar_servicio(self, nombreservicio, costoservicio):
        if costoservicio < 0:
            print('El costo del servicio debería ser mayor que 0')
            return
        self.servicios[nombreservicio] = costoservicio

    def total_nota(self):
        total_nota = sum(self.servicios.values())
        return total_nota

listanotas = []
NotasCanceladas = []

def CrearNota():
    folio = 1
    while True:
        try:
            nombrecliente = input("Ingrese el nombre del cliente a almacenar (o escriba 'S' para salir): ")
            if nombrecliente.upper() == 'S':
                break
            elif nombrecliente.isdigit():
                print("Intente de nuevo, usted ha ingresado números en vez de letras.")
            else:
                print(f"Nombre del cliente almacenado: {nombrecliente}")
                
                while True:
                    fechanota= input("Ingrese la fecha de la nota (DD-MM-AAAA): ")
                    fechanota = datetime.datetime.strptime(fechanota, "%d-%m-%Y").date()
                    if fechanota > datetime.date.today():
                        print("La fecha ingresada no es válida")
                    else:
                        break
                        

                notacreada = RegistroNota(nombrecliente, folio, fechanota)

                while True:
                    nombreservicio = input("Ingrese el nombre del servicio: ")
                    costoservicio = float(input("Ingrese el costo del servicio: "))
                    notacreada.agregar_servicio(nombreservicio, costoservicio)

                    otroservicio = input("¿Desea agregar otro servicio? (SI/NO): ")
                    if otroservicio.upper() != "SI":
                        break
                listanotas.append(notacreada)
                folio += 1

        except KeyboardInterrupt:
            print("\nUsted ha decidido interrumpir el programa")
            break

    for notacreada in listanotas:
        print(f"\nNota:")
        print(f"Folio: {notacreada.folio}")
        print(f"Fecha: {notacreada.fecha}")
        print(f"Nombre del cliente: {notacreada.nombrecliente}")
        print(f"Servicios realizados:")
        for nombreservicio, costoservicio in notacreada.servicios.items():
            print(f"Servicio: {nombreservicio}\t Costo: ${costoservicio}")
        print(f"Total a pagar: $ {notacreada.total_nota()}")

CONSULTAS Y REPORTES- ULISES----------------------------------------------------------------------------------------
def consultar_por_fecha(notas):
    fecha_inicial = input("Ingrese la fecha inicial (YYYY-MM-DD): ")
    fecha_final = input("Ingrese la fecha final (YYYY-MM-DD): ")

    fecha_inicial = datetime.datetime.strptime(fecha_inicial, "%Y-%m-%d").date()
    fecha_final = datetime.datetime.strptime(fecha_final, "%Y-%m-%d").date()

    notas_periodo = [nota for nota in notas if fecha_inicial <= nota.fecha <= fecha_final]

    if not notas_periodo:
        print("No hay notas emitidas para el período especificado.")
    else:
        print("Notas del período:")
        for nota in notas_periodo:
            print(f"Folio: {nota.folio}")
            print(f"Nombre del Cliente: {nota.nombrecliente}")
            print("Servicios realizados:")
            for nombreservicio, costoservicio in nota.servicios.items():
                print(f"Servicio: {nombreservicio}\t Costo: ${costoservicio}")
            print(f"Total a pagar: $ {nota.total_nota()}")

def consultar_por_folio(notas):
    folio = input("Ingrese el folio de la nota a consultar: ")
    nota_encontrada = None

    for nota in listanotas:
        if str(nota.folio) == folio:
            nota_encontrada = nota
            break

    if nota_encontrada:
        print(f"Nota encontrada:")
        print(f"Folio: {nota_encontrada.folio}")
        print(f"Fecha: {nota_encontrada.fecha}")
        print(f"Nombre del cliente: {nota_encontrada.nombrecliente}")
        print("Servicios:")
        for nombreservicio, costoservicio in nota_encontrada.servicios.items():
            print(f"Servicio: {nombreservicio}, Costo: ${costoservicio}")
        print(f"Total a pagar: ${nota_encontrada.total_nota()}")
    else:
        print("La nota no se encuentra en el sistema o fue cancelada.")
CANCELAR NOTA- LIZETH-----------------------------------------------------------------------------------------------------------------
def CancelarNota(listanotas):
    try:
        folioCancelar = input("Ingrese el folio de la nota que desea cancelar o escriba 'S' para salir: ").strip()
        if folioCancelar.upper() == 'S':
            print("Saliendo del servicio CancelarNota.")
            return

        folioCancelar = int(folioCancelar)
        notaBuscada = next((nota for nota in listanotas if nota.folio == folioCancelar), None)

        if notaBuscada:
            if notaBuscada.cancelada:
                print("La nota ya ha sido cancelada.")
            else:
                print("\nDetalles de la nota a cancelar:")
                print(f"Folio: {notaBuscada.folio}")
                print(f"Fecha: {notaBuscada.fecha}")
                print(f"Nombre del cliente: {notaBuscada.nombrecliente}")
                print("Servicios realizados:")
                for nombreservicio, costoservicio in notaBuscada.servicios.items():
                    print(f"Servicio: {nombreservicio}\t Costo: ${costoservicio}")
                print(f"Total a pagar: $ {notaBuscada.total_nota()}")
                confirmacion = input("¿Desea cancelar esta nota? (SI/NO): ").strip().upper()
                if confirmacion == "SI":
                    notaBuscada.cancelada = True
                    print("Nota cancelada éxitosamente.")
                    listanotas.pop(listanotas.index(notaBuscada))
                    NotasCanceladas.append(notaBuscada)
                else:
                    print("La nota no ha sido cancelada.")
        else:
            print("El folio no se encuentra en el sistema.")

    except ValueError:
        print("Ingrese un número de folio válido.")


#RECUPERAR NOTA- ADRIAN--------------------------------------------------------------------------------------------------------
def recuperar_nota(NotasCanceladas, listanotas):
    try:
        if not NotasCanceladas:
            print("No hay notas canceladas para recuperar")
            return

        print("Notas canceladas:")
        print("Folio\tFecha\t\tNombre del Cliente")
        for nota in NotasCanceladas:
            print(f"{nota.folio}\t{nota.fecha}\t{nota.nombrecliente}")

        folio_recuperar = input("Ingrese el folio de la nota que desea recuperar o 'S' para salir: ").strip()

        if folio_recuperar.upper() == 'S':
            print("Saliendo del servicio RecuperarNota")
            return

        folio_recuperar = int(folio_recuperar)
        nota_recuperar = None

        for nota in NotasCanceladas:
            if nota.folio == folio_recuperar:
                nota_recuperar = nota
                break

        if nota_recuperar:
            print("\nDetalles de la nota a recuperar:")
            print(f"Folio: {nota_recuperar.folio}")
            print(f"Fecha: {nota_recuperar.fecha}")
            print(f"Nombre del cliente: {nota_recuperar.nombrecliente}")
            print("Servicios realizados:")
            for nombreservicio, costoservicio in nota_recuperar.servicios.items():
                print(f"Servicio: {nombreservicio}\t Costo: ${costoservicio}")
            print(f"Total a pagar: $ {nota_recuperar.total_nota()}")

            confirmacion = input("¿Desea recuperar esta nota? (SI/NO): ").strip().upper()
            if confirmacion == "SI":
                nota_recuperar.cancelada = False
                print("Nota recuperada exitosamente.")
                NotasCanceladas.pop(NotasCanceladas.index(nota_recuperar))
                listanotas.append(nota_recuperar)
            else:
                print("La nota no ha sido recuperada.")
        else:
            print("El folio no se encuentra en la lista de notas canceladas.")

    except ValueError:
        print("Ingrese un número de folio válido.")



MENU Y SUBMENU-------------------------------------------------------------------------------------------------------------
while True:
    print("\nMenú Principal:")
    print("1. Crear una nota")
    print("2. Consultas y Reportes")
    print("3. Cancelar una nota")
    print("4. Recuperar una nota")
    print("5. Salir")

    opcion_menu = input("Seleccione una opción: ")

    if opcion_menu == "1":
        CrearNota()
    elif opcion_menu == "2":
        while True:
            print("\nSubMenu :")
            print("1. Consultar nota por fecha")
            print("2. Consultar nota por folio")
            print("3. Volver al menú principal")

            opcion_submenu = input("Seleccione una opción: ")

            if opcion_submenu == "1":
                consultar_por_fecha(listanotas)
            elif opcion_submenu == "2":
                consultar_por_folio(listanotas)
            elif opcion_submenu == "3":
                break
            else:
                print("Opción no válida.")
    elif opcion_menu == "3":
        CancelarNota(listanotas)
    elif opcion_menu == "4":
        recuperar_nota(NotasCanceladas, listanotas)
    elif opcion_menu == "5":
        break
    else:
        print("Opción no válida.")
